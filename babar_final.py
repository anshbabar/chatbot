# -*- coding: utf-8 -*-
"""Babar_final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ehbb5rsD4V6zgtKgEuGO5uL9T7WJyLZ-
"""

OPENAI_API_KEY = "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"
PINECONE_API_KEY = "277559a4-1d3f-491a-a395-d881bd91bdf9"
PINECONE_API_ENV = "us-west4-gcp-free"

!pip install tiktoken
!pip install langchain
!pip install pinecone-client
!pip install openai
!pip install pypdf

from google.colab import drive
drive.mount('pdfs/', force_remount=True)

!ls pdfs/MyDrive/

pdfs = [
    "pdfs/MyDrive/CDOC-110hdoc50.pdf"
]

from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

documents = []
for pdf in pdfs:
    loader = PyPDFLoader(pdf)
    document = loader.load()
    documents.append(document)

text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)

chunked_doc = []
for doc in documents:
    texts = text_splitter.split_documents(doc)
    chunked_doc.append(texts)
    print(f"chunked_doc length: {len(texts)}")

# Was unable to create an index here.

from langchain.vectorstores import Chroma, Pinecone
from langchain.embeddings.openai import OpenAIEmbeddings
import pinecone
import os

#Create embeddings using OpenAI API
embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

# Initialize Pinecone
pinecone.init(
    api_key=PINECONE_API_KEY,
    environment=PINECONE_API_ENV
)

index_name = "ab-custom-data"

for chunks in chunked_doc:
    Pinecone.from_texts([chunk.page_content for chunk in chunks], embeddings, index_name=index_name)

vectorstore = Pinecone.from_existing_index(index_name=index_name, embedding=embeddings)

"""# Step 5 - Chat with your document (Q&A)

### Step 5.1 - Ask questions about the document
"""

from langchain.llms import OpenAI
from langchain.chains.question_answering import load_qa_chain

llm = OpenAI(temperature=0, openai_api_key=OPENAI_API_KEY)
chain = load_qa_chain(llm)

query = "What are the contents of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "When was the constitution created?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "Who wrote the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "How many articles are in the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "What is the first article of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "What is the third article of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "What is the second article of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "What is the fifth article of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "How many amendments are there in the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "What is the thirteenth amendment of the constitution of the United States?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)

query = "what is the constitution?"
docs = vectorstore.similarity_search(query)
chain.run(input_documents=docs, question=query)